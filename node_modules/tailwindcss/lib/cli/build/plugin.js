// @ts-check
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createProcessor", {
    enumerable: true,
    get: function() {
        return createProcessor;
    }
});
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _fs = /*#__PURE__*/ _interop_require_default(require("fs"));
const _postcssloadconfig = /*#__PURE__*/ _interop_require_default(require("postcss-load-config"));
const _lilconfig = require("lilconfig");
const _plugins = /*#__PURE__*/ _interop_require_default(require("postcss-load-config/src/plugins" // Little bit scary, looking at private/internal API
));
const _options = /*#__PURE__*/ _interop_require_default(require("postcss-load-config/src/options" // Little bit scary, looking at private/internal API
));
const _processTailwindFeatures = /*#__PURE__*/ _interop_require_default(require("../../processTailwindFeatures"));
const _deps = require("./deps");
const _utils = require("./utils");
const _sharedState = require("../../lib/sharedState");
const _resolveConfig = /*#__PURE__*/ _interop_require_default(require("../../../resolveConfig.js"));
const _content = require("../../lib/content.js");
const _watching = require("./watching.js");
const _fastglob = /*#__PURE__*/ _interop_require_default(require("fast-glob"));
const _findAtConfigPath = require("../../lib/findAtConfigPath.js");
const _log = /*#__PURE__*/ _interop_require_default(require("../../util/log"));
const _loadconfig = require("../../lib/load-config");
const _getModuleDependencies = /*#__PURE__*/ _interop_require_default(require("../../lib/getModuleDependencies"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 *
 * @param {string} [customPostCssPath ]
 * @returns
 */ async function loadPostCssPlugins(customPostCssPath) {
    let config = customPostCssPath ? await (async ()=>{
        let file = _path.default.resolve(customPostCssPath);
        // Implementation, see: https://unpkg.com/browse/postcss-load-config@3.1.0/src/index.js
        // @ts-ignore
        let { config ={}  } = await (0, _lilconfig.lilconfig)("postcss").load(file);
        if (typeof config === "function") {
            config = config();
        } else {
            config = Object.assign({}, config);
        }
        if (!config.plugins) {
            config.plugins = [];
        }
        return {
            file,
            plugins: (0, _plugins.default)(config, file),
            options: (0, _options.default)(config, file)
        };
    })() : await (0, _postcssloadconfig.default)();
    let configPlugins = config.plugins;
    let configPluginTailwindIdx = configPlugins.findIndex((plugin)=>{
        if (typeof plugin === "function" && plugin.name === "tailwindcss") {
            return true;
        }
        if (typeof plugin === "object" && plugin !== null && plugin.postcssPlugin === "tailwindcss") {
            return true;
        }
        return false;
    });
    let beforePlugins = configPluginTailwindIdx === -1 ? [] : configPlugins.slice(0, configPluginTailwindIdx);
    let afterPlugins = configPluginTailwindIdx === -1 ? configPlugins : configPlugins.slice(configPluginTailwindIdx + 1);
    return [
        beforePlugins,
        afterPlugins,
        config.options
    ];
}
function loadBuiltinPostcssPlugins() {
    let postcss = (0, _deps.loadPostcss)();
    let IMPORT_COMMENT = "__TAILWIND_RESTORE_IMPORT__: ";
    return [
        [
            (root)=>{
                root.walkAtRules("import", (rule)=>{
                    if (rule.params.slice(1).startsWith("tailwindcss/")) {
                        rule.after(postcss.comment({
                            text: IMPORT_COMMENT + rule.params
                        }));
                        rule.remove();
                    }
                });
            },
            (0, _deps.loadPostcssImport)(),
            (root)=>{
                root.walkComments((rule)=>{
                    if (rule.text.startsWith(IMPORT_COMMENT)) {
               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","hash":"BDrx7zBS516Z4fzmMq2nzKWo2g4=","signature":"1Eu7Gl0PqIle4L4KBHAKUHRrhdWdJc9J8WMYvvLc0dM=","timestamp":"1684177128"}],"session_id":1},"uninstall_metrics":{"installation_date2":"1684177019"},"user_experience_metrics":{"client_id2":"af43150f-12cd-4ce4-a25c-b96ac5bb7960","diagnostics":{"last_data_collection_level_on_launch":3},"low_entropy_source3":5054,"payload_counter":1,"pseudo_low_entropy_source":7957,"reporting_URL_enabled":true,"reporting_enabled":true,"session_id":0,"stability":{"browser_last_live_timestamp":"13344906886389497","child_process_crash_count":0,"crash_count":0,"exited_cleanly":true,"extension_renderer_crash_count":0,"extension_renderer_failed_launch_count":0,"extension_renderer_launch_count":6,"gpu_crash_count":0,"incomplete_session_end_count":0,"launch_count":1,"page_load_count":7,"plugin_stats2":[],"renderer_crash_count":0,"renderer_failed_launch_count":0,"renderer_hang_count":0,"renderer_launch_count":3,"saved_system_profile":"CMC0rYgGEg45Mi4wLjkwMi42Ny02NBgAIgVlbi1VUyoYCgpXaW5kb3dzIE5UEgoxMC4wLjE5MDQ0MmAKBng4Nl82NBD8OhiAgNC+of8fIgAoATDWCjiABkIKCAAQABoAMgA6AE0AAAAAVQAAAABlAACAP2oXCgxBdXRoZW50aWNBTUQQgZ6YBBgMIACCAQCKAQCqAQZ4ODZfNjRKCg0scv/aFV5v0thKCg3ep4MJFV5v0thKCg1BKaS5FV5v0thKCg1oPXKwFV5v0thKCg25ByUMFV5v0thKCg0GaNvYFV5v0thKCg0itCDqFV5v0thKCg2e/DmVFV5v0thKCg1D6CLlFV5v0thKCg0gq0W9FV5v0thKCg14n4vKFV5v0thKCg2YzoGUFfT0Rz1KCg0xkFUMFfT0Rz1QBFoCCABiBElOQlhqDAgAEAAYACAGOABAAIABoOaJowaQAbgDkAG/A5ABzgSQAdEEkAHlBJAB/gSQAY8FkAG2BZABoQaQAeAGmAEAygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAB4AIABAMg+A9I+IGRnaWtsa2ZrbGxpa2NhbmZvbmtjYWJtYmRmbWdsZWFnygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAJ4AIABAMg+A9I+IGZpa2JqYmVtYm5tZmhwcGpmbm1ma2FoZGhmb2hoam1nygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAB4AIABAMg+A9I+IGdlaWlubGhhYm9sYWNtZGdka2JrcHBmbWlqbGVtamVwygFFCAQQBRgBIAAoADAAOABAAEgAUABYAGAAaAB4AIABAMg+A9I+IGlnbGNqZGVta25lYmpia2xjZ2tmYWViZ29qanBoa2VjygFFCAYQBRgCIAAoADAAOABAAEgAUABYAGAAaAJ4AIABAMg+A9I+IGlobWFmbGxpa2licG1pZ2tjb2FkY21ja2JmaGliZWZwygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAJ4AIABAMg+A9I+IGpkaWNjbGRpbXBkYWlibXBka2puYm1ja2lhbmJmb2xkygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAJ4AIABAMg+A9I+IGttZW5kZmFwZ2dqZWhvZG5kZmxtbWdhZ2RiYW1obmZkygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAB4AIABAMg+A9I+IG1oamZibWRnY2ZqYmJwYWVvam9mb2hvZWZnaWVoamFpygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAJ4AIABAMg+A9I+IG5jYmplbHBqY2hrcGJpa2Jwa2NjaGtoa2Jsb2RvYW1hygFFCAEQBRgCIAAoADAAOABAAEgAUABYAGAAaAJ4AIABAMg+A9I+IG5rZWltaG9namRwbnBjY29vZnBsaWltYWFobWFhb21l+AG+J4AC////////////AYgCAZICJGFmNDMxNTBmLTEyY2QtNGNlNC1hMjVjLWI5NmFjNWJiNzk2MKgClT6yAhCGO5TXLEYKHOLGK7V4EA+yyj59CgQIABAAEgwKAggDEgIICBoCCAEaDwoNbm9fZW52LW5vX3ZlciICCAIyAggAOgsI////////////AUIpEgoxLjMuMTQ3LjM3GAUgACoOUmVnS2V5Tm90Rm91bmQyB3dpbmRvd3NSAggAWhIJz/dT46UrQUARarx0kxi8VEA=","saved_system_profile_hash":"45ADE0E7879E318A14BBA23B06D1E69BF097CDE2","session_end_completed":true,"stats_buildtime":"1628133952","stats_version":"92.0.902.67-64","system_crash_count":0}},"variations_compressed_seed":"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